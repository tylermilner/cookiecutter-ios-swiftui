# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# Fix "xcodebuild -showBuildSettings timed out" error when running on slow machines
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

default_platform(:ios)

before_all do |lane, options|
  # Make sure fastlane is being executing using 'bundle exec' prefix
  ensure_bundle_exec()
end

platform :ios do
  # Variables available to all lanes
  ci_build_number = ENV["BUILD_NUMBER"] ? ENV["BUILD_NUMBER"] : "1" # Defaults to build number "1"
  build_directory = ENV["BUILD_DIRECTORY"] ? ENV["BUILD_DIRECTORY"] : ".build" # Defaults to ".build" directory for build artifacts
  derived_data_path = "#{build_directory}/DerivedData"
  app_name = "{{ cookiecutter.project_name }}"
  scheme = "{{ cookiecutter.__scheme }}"
  target = "{{ cookiecutter.target_name }}"
  qa_build_type = "adhoc"
  qa_build_configuration = "QA"
  default_test_device = "{{ cookiecutter.simulator_name }}"

  desc "Run tests"
  lane :test do |options|
    # Check for test device override
    device = options[:device] || default_test_device

    # Do clean build and force quit & pre-launch simulator to increase UI test reliability when run on CI
    run_tests(
      derived_data_path: derived_data_path,
      clean: true,
      force_quit_simulator: true,
      prelaunch_simulator: true,
      device: device,
      ensure_devices_found: true
    )
  end

  desc "Create an App ID on the Apple Developer Portal"
  lane :setup_app_id do
    # Make sure the required environment variables are present (e.g. in .env file)
    ensure_env_vars(
      env_vars: [
        "FASTLANE_USER", # Apple ID username
        "FASTLANE_TEAM_ID" # Apple Developer Team ID
      ]
    )

    # Create the App ID in the Apple Developer Portal (and not App Store Connect)
    produce(
      app_name: app_name,
      skip_itc: true
    )
  end

  desc "Create certificates and provisioning profiles"
  lane :setup_certs do
    # Make sure the required environment variables are present (e.g. in .env file)
    ensure_env_vars(
      env_vars: [
        "MATCH_GIT_URL", # URL to the certificates repository
        "MATCH_GIT_BASIC_AUTHORIZATION", # Base64 encoded GitHub PAT to access the certificates repository
        "MATCH_PASSWORD", # Decrypts the certificates and profiles
        
        # Environment variables for App Store Connect.
        # See https://docs.fastlane.tools/app-store-connect-api/#using-an-app-store-connect-api-key.
        "APP_STORE_CONNECT_API_KEY_KEY_ID", # Key ID
        "APP_STORE_CONNECT_API_KEY_ISSUER_ID", # Key Issuer ID
        "APP_STORE_CONNECT_API_KEY_KEY" # Base64 encoded key content (e.g. `cat [YOUR_KEY_NAME].p8 | base64`)
      ]
    )

    # Load the API key for App Store Connect
    app_store_connect_api_key(
      is_key_content_base64: true
    )

    # Create certificates and provisioning profiles
    # Use the is_ci flag to prevent accidentally modifying certs and profiles when running on CI
    match(
      type: "development",
      readonly: is_ci
    )
    match(
      type: "adhoc",
      readonly: is_ci
    )
    match(
      type: "appstore",
      readonly: is_ci
    )
  end

  desc "Add development device to the Apple Developer Portal and regenerate provisioning profiles"
  lane :add_device do |options|
    # Make sure the required parameters are provided
    device_name = options[:device_name] || (is_ci ? UI.user_error!("Please provide a 'device_name'.") : UI.input("Device name: "))
    device_udid = options[:device_udid] || (is_ci ? UI.user_error!("Please provide a 'device_udid'.") : UI.input("Device UDID: "))

    # Make sure the required environment variables are present (e.g. in .env file)
    ensure_env_vars(
      env_vars: [
        "MATCH_GIT_URL", # URL to the certificates repository
        "MATCH_GIT_BASIC_AUTHORIZATION", # Base64 encoded GitHub PAT to access the certificates repository
        "MATCH_PASSWORD", # Decrypts the certificates and profiles
        
        # Environment variables for App Store Connect.
        # See https://docs.fastlane.tools/app-store-connect-api/#using-an-app-store-connect-api-key.
        "APP_STORE_CONNECT_API_KEY_KEY_ID", # Key ID
        "APP_STORE_CONNECT_API_KEY_ISSUER_ID", # Key Issuer ID
        "APP_STORE_CONNECT_API_KEY_KEY" # Base64 encoded key content (e.g. `cat [YOUR_KEY_NAME].p8 | base64`)
      ]
    )

    # Load the API key for App Store Connect (default values provided via environment variables)
    app_store_connect_api_key(
      is_key_content_base64: true
    )

    # Add the device to the Apple Developer Portal
    register_devices(
      devices: {
        device_name => device_udid
      }
    )

    # Create new provisioning profiles
    # Use `force_for_new_devices` to have match regenerate provisioning profiles for newly added devices
    match(
      type: "development",
      readonly: false,
      force_for_new_devices: true
    )
    match(
      type: "adhoc",
      readonly: false,
      force_for_new_devices: true
    )
  end
end
